% HR2DrotExeMain.m
%
% Program is the main() for running the diffusion of 2D hard rods with
% orientation. Program handles interactions using DDFT

function [] = HR2DrotExeMain(InputFile)
% Add paths (this should already be added, but just to be careful)
% Save error messages in file
try
%     keyboard
    addpath C:\Users\MWS\Documents\MATLAB\Programs\ExpoKit
    %     keyboard
    tMainID  = tic;
    %Grab the parameters
    % keyboard
    DataTemp    = importdata(InputFile);
    ParamVec    = DataTemp.data(1,:);
    TimeVec     = DataTemp.data(2,~isnan(DataTemp.data(2,:)));    %Pull out the time stuff
    FileNameMat = DataTemp.textdata(1);
    Path2Save   = DataTemp.textdata(2);
    IntDenType  = DataTemp.textdata(3);
    
    % Make some  objects
%     ParamNmVec = {'trial' 'Interactions' 'Nx' 'Ny' 'Nm' 'Lx' 'Ly' 'L_rod' 'Diam' 'Eta_visc'...
%         'Tmp' 'Norm' 'WeightPos' 'WeightAng' 'NumModesX' 'NumModesY' 'NumModesM' 'bc'};
ParamNmVec = {'trial' 'Interactions' 'Nx' 'Ny' 'Nm' 'Lx' 'Ly' 'L_rod' ...
        'Tmp' 'Norm' 'WeightPos' 'WeightAng' 'NumModesX' 'NumModesY' 'NumModesM' 'bc'...
        'Mob_par' 'Mob_perp' 'Mob_rot'};
    
    TimeNmVec  = {'delta_t' 't_record' 't_tot' 'ss_epsilon'};
    
%     ParamObj   = struct('NmVec',{ParamNmVec},'ValVec',ParamVec,'trial',ParamVec(1),...
%         'Interactions',ParamVec(2), 'Movies',ParamVec(3),...
%         'Nx', ParamVec(4),'Ny', ParamVec(5),'Nm', ParamVec(6),...
%         'Lx', ParamVec(7),'Ly', ParamVec(8),'L_rod', ParamVec(9), ...
%         'Diam', ParamVec(10), 'Eta_visc',ParamVec(11),  ...
%         'Tmp',ParamVec(12), 'Norm',ParamVec(13), 'WeightPos',ParamVec(14), ...
%         'WeightAng',ParamVec(15), 'NumModesX',ParamVec(16), 'NumModesY',ParamVec(17), ...
%         'NumModesM', ParamVec(18), 'bc',ParamVec(19));

 ParamObj   = struct('NmVec',{ParamNmVec},'ValVec',ParamVec,'trial',ParamVec(1),...
        'Interactions',ParamVec(2), 'Movies',ParamVec(3),...
        'Nx', ParamVec(4),'Ny', ParamVec(5),'Nm', ParamVec(6),...
        'Lx', ParamVec(7),'Ly', ParamVec(8),'L_rod', ParamVec(9), ...
        'Tmp',ParamVec(10), 'Norm',ParamVec(11), 'WeightPos',ParamVec(12), ...
        'WeightAng',ParamVec(13), 'NumModesX',ParamVec(14), 'NumModesY',ParamVec(15), ...
        'NumModesM', ParamVec(16), 'bc',ParamVec(17),...
        'Mob_par', ParamVec(18), 'Mob_perp', ParamVec(19), 'Mob_rot', ParamVec(20));
   
   
    %     keyboard
    % Create a file that holds warning print statements
    WarningStmtString = sprintf('WarningStmts_%i.txt',ParamObj.trial);
    wfid              = fopen(WarningStmtString,'a+');    % a+ allows to append data
    
    LocString = sprintf('Location_%i.txt',ParamObj.trial);
    lfid      = fopen(LocString,'a+');    % a+ allows to append data
    fprintf(lfid,'Starting main, current code\n');
    
    %Time Recording
    N_time   = ceil(TimeVec(3)/TimeVec(1));               %number of time steps
    N_record = ceil(TimeVec(3)/TimeVec(2));               %number of time points to record. Does not include initial density
    N_count  = ceil(TimeVec(2)/TimeVec(1));               %spacing between times to record
    
    
    TimeObj = struct('TimeNmVec',{TimeNmVec},'TimeVec',{TimeVec},...
        'delta_t',TimeVec(1), 't_record',TimeVec(2), 't_tot',TimeVec(3), 'ss_epsilon',TimeVec(4),...
        'N_time', N_time, 'N_record',N_record,'N_count',N_count);
    
    
    
    %%%Make all the grid stuff%%%%%%%%%%%%%%
    [GridObj]    = GridMaker(ParamObj.Nx,ParamObj.Ny,ParamObj.Nm,ParamObj.Lx,ParamObj.Ly);
    fprintf(lfid,'Made grid\n');
    
    %Make diffusion coeff (send smallest dx dy for stability
    [DiffMobObj] =  DiffCoupCoeffCalcGivenMob(...
        wfid,ParamObj.Tmp,ParamObj.Mob_par,ParamObj.Mob_perp,ParamObj.Mob_rot,TimeObj.delta_t, min(GridObj.dx,GridObj.dy),...
        GridObj.dphi,GridObj.kx2D, GridObj.ky2D);
    
    fprintf(lfid,'Made diffusion object\n');
    
    % Initialize density
    %     [rho] = IntDen2DrotVgrCalcCosModes(GridObj,ParamObj);
    if strcmp(IntDenType,'PlaneWave')
        [rho] = IntDenCalcPwModes2Drot(GridObj,ParamObj);
    elseif strcmp(IntDenType,'SepPlaneWave')
        [rho] = IntDenCalcSepPwModes2Drot(GridObj,ParamObj);
    elseif strcmp(IntDenType,'Gaussian')
        [rho] = IntDenCalcGauss2Drot(GridObj,ParamObj);
    elseif strcmp(IntDenType,'EquilibriumPW')
        [rho] = IntDenCalcPerturbEqPw2Drot(GridObj,ParamObj);
    elseif strcmp(IntDenType,'EquilibriumSPW')
        [rho] = IntDenCalcPerturbEqSepPw2Drot(GridObj,ParamObj);
    elseif strcmp(IntDenType,'Loaded')
        [rho] = IntDenCalcLoaded2Drot(DataTemp.textdata{4});
    end
    
    % Run the main code
    tBodyID      = tic;
    %     [DenRecObj]  = HR2DrotDenEvolverFTBodyVgr(wfid,lfid,rho,ParamObj, TimeObj,GridObj,DiffMobObj);
    [DenRecObj]  = HR2DrotDenEvolverFTBody(wfid,lfid,rho,ParamObj, TimeObj,GridObj,DiffMobObj);
    BodyRunTime  = toc(tBodyID);
    fprintf(lfid,'Made density object\n');
    % keyboard
    
    % Run movies if you want
    if ParamObj.Movies == 1
        % Build OP records
        tOpID           = tic ;
        %         keyboard
        if  DenRecObj.DidIBreak == 0
            [OrderParamObj] = CPNrecMaker(ParamObj.Nx,ParamObj.Ny,DenRecObj.TimeRecVec,GridObj,DenRecObj.Density_rec);
        else %Don't incldue the blowed up denesity for movies. They don't like it.
            TimeRecVecTemp = DenRecObj.TimeRecVec(1:end-1);
            [OrderParamObj] = ...
                CPNrecMaker(ParamObj.Nx,ParamObj.Ny,TimeRecVecTemp,GridObj,DenRecObj.Density_rec(:,:,:,1:length(TimeRecVecTemp)));
        end
        OpRunTime       = toc(tOpID);
        fprintf(lfid,'Made interaction order paramater object\n');
        
        % Make matlab movies
        tMovID       = tic;
        [MovieObj]   = OPMatMovieMaker(ParamObj.Nx,ParamObj.Ny,GridObj.x,GridObj.y,OrderParamObj);
        MovRunTime   = toc(tMovID);
        fprintf(lfid,'Made movies\n');
        
        MovM_C = MovieObj.M_C;
        MovM_P = MovieObj.M_P;
        MovM_N = MovieObj.M_N;
        
    end
    % keyboard
    % Generate dispersion relations
    %   SpectralAnalysis2DwRot(DenRecObj.DensityFT_rec, ParamObj.N, ...
    %                         GridObj.ky, GridObj.kx, GridObj.km, ...
    %                         TimeObj.N_record, TimeObj.t_record)
    
    
    % Create and save a memory obj
    [uVmain, sVmain] = memory;
    MemObj           = struct('uVmain', uVmain,'sVmain', sVmain, ...
        'uVbody', DenRecObj.uVbody,'sVbody', DenRecObj.sVbody);
    % Save all parameters
    PTMGDObj = struct('ParamObj',ParamObj,'TimeObj',TimeObj,'MemObj',MemObj,'GridObj',GridObj,'D_pos',DiffMobObj.D_pos,'D_rot',DiffMobObj.D_rot);
    
    % Run BlowUpTracker
    if ParamObj.Movies == 1
        BlowUpTracker
    end
    % Save everything. Save seperately for big files
    %     keyboard
    DenStr = sprintf('DenRec_%i',ParamObj.trial);
    PTMGDStr = sprintf('PTMGD_%i',ParamObj.trial);
    save(DenStr,'DenRecObj','-v7.3')
    save(PTMGDStr,'PTMGDObj','-v7.3')
    
    if ParamObj.Movies == 1
        MovMCStr = sprintf('MovieMC_%i',ParamObj.trial);
        MovMPStr = sprintf('MovieMP_%i',ParamObj.trial);
        MovMNStr = sprintf('MovieMN_%i',ParamObj.trial);
        MovBTStr = sprintf('MovieBT_%i',ParamObj.trial);
        save(MovMCStr,'MovM_C','-v7.3')
        save(MovMNStr,'MovM_N','-v7.3')
        save(MovMPStr,'MovM_P','-v7.3')
        save(MovBTStr,'MovM_BT','-v7.3')
    end
    
    % Save how long everything took
    fprintf(lfid,'Everything saved\n');
    TotRunTime = toc(tMainID);
    fprintf(lfid,'Body Run Time = %f\n\n', BodyRunTime);
    
    if ParamObj.Movies == 1
        fprintf(lfid,'OrderParam Run time = %f\n', OpRunTime);
        fprintf(lfid,'Make Mov Run Time = %f\n',  MovRunTime);
    end
    
    fprintf(lfid,'Total Run time = %f\n', TotRunTime);
    fclose('all');
    % keyboard
    % Move everything
    MoveStrTxt = sprintf('*%i.txt', ParamObj.trial);
    MoveStrMat = sprintf('*%i.mat', ParamObj.trial);
    movefile(MoveStrTxt,Path2Save{1});
    movefile(MoveStrMat,Path2Save{1});
    
    
    cd C:\Users\MWS\Documents\Research\BG\Results\HRddft\RodsFullInteract
    
catch err %Catch errors and move them
    
    ErrFileNmStr = sprintf('logFile%i.txt',ParamObj.trial);
    efid         = fopen(ErrFileNmStr,'a+');
    % write the error to file and to screen
    % first line: message
    fprintf(efid,'%s', err.getReport('extended', 'hyperlinks','off')) ;
    fprintf('%s', err.getReport('extended')) ;
    fclose(efid);
    fclose('all');
    keyboard
    % Move everything in case there is an error
    MoveStrTxt = sprintf('*%i.txt', ParamObj.trial);
    MoveStrMat = sprintf('*%i.mat', ParamObj.trial);
    %     keyboard
    movefile(MoveStrTxt,Path2Save{1});
    
    cd C:\Users\MWS\Documents\Research\BG\Results\HRddft\RodsFullInteract
    %
end %End try and catch

% keyboard
clear
% clc
close all
end % End HR2DrotVgrExeMain.m